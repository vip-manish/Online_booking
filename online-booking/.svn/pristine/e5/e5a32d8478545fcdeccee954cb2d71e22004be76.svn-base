using PingaUnitBooking.Core.Domain;
using PingaUnitBooking.Infrastructure.Interfaces;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static System.Runtime.InteropServices.JavaScript.JSType;
using System.Text.RegularExpressions;

namespace PingaUnitBooking.Infrastructure.Implementations
{
    public class UnitService : IUnitInterface
    {
        private readonly IDbInterface _dbInterface;
        public UnitService(IDbInterface _dbInterface)
        {
            this._dbInterface = _dbInterface;
        }

        public async Task<ResponseDataResults<List<UnitData>>> unitDetailsList(decimal? groupID, int? userID)
        {
            try
            {
                List<UnitData> _UnitData = new List<UnitData>();

                using (SqlConnection connection = new SqlConnection(await _dbInterface.getREMSConnectionString()))
                {
                    await connection.OpenAsync();

                    using (SqlCommand command = new SqlCommand("ubm_unitDetails", connection))
                    {
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.AddWithValue("@groupID", groupID);
                        command.Parameters.AddWithValue("@userID", userID);

                        using (SqlDataReader reader = await command.ExecuteReaderAsync())
                        {
                            while (reader.Read())
                            {
                                UnitData _ud = new UnitData();

                                _ud.towerName= reader.GetString(reader.GetOrdinal("TowerName"));
                                _ud.companyID= reader.GetDecimal(reader.GetOrdinal("CompanyID"));
                                _ud.locationID= reader.GetDecimal(reader.GetOrdinal("LocationID"));
                                _ud.floorID= reader.GetDecimal(reader.GetOrdinal("FloorID"));
                                _ud.floorName = reader.GetString(reader.GetOrdinal("FloorName"));
                                _ud.projectName= reader.GetString(reader.GetOrdinal("ProjectName"));
                                _ud.locationName= reader.GetString(reader.GetOrdinal("LocationName"));
                                _ud.unitID= reader.GetDecimal(reader.GetOrdinal("UnitID"));
                                _ud.unitNo= reader.GetString(reader.GetOrdinal("UnitNo"));
                                _ud.categoryName= reader.GetString(reader.GetOrdinal("CatName"));
                                _ud.netAmount= reader.GetDecimal(reader.GetOrdinal("NetAmount"));
                                _ud.area= reader.GetDecimal(reader.GetOrdinal("area"));
                                _ud.rate= reader.GetDecimal(reader.GetOrdinal("Rate"));
                                _ud.unitSuperArea= reader.GetDecimal(reader.GetOrdinal("UnitSuperArea"));
                                _ud.unitSuperAreaRate= reader.GetDecimal(reader.GetOrdinal("UnitSuperAreaRate"));
                                _ud.unitBuiltUpArea= reader.GetDecimal(reader.GetOrdinal("UnitBuiltUpArea"));
                                _ud.unitBuiltUpAreaRate= reader.GetDecimal(reader.GetOrdinal("UnitBuiltUpAreaRate"));
                                _ud.unitTerraceArea= reader.GetDecimal(reader.GetOrdinal("UnitTerraceArea"));
                                _ud.unitTerraceAreaRate= reader.GetDecimal(reader.GetOrdinal("UnitTerraceAreaRate"));
                                _ud.unitBalconyArea= reader.GetDecimal(reader.GetOrdinal("UnitBalconyArea"));
                                _ud.unitBalconyAreaRate= reader.GetDecimal(reader.GetOrdinal("UnitBalconyAreaRate"));
                                _ud.basicAmount= reader.GetDecimal(reader.GetOrdinal("BasicAmount"));
                                _ud.unitCarpetArea = reader.GetDecimal(reader.GetOrdinal("unitCarpetArea"));
                                _ud.unitStatus= reader.GetInt32(reader.GetOrdinal("unitStatus"));
                                _ud.additionalCharge = reader.GetDecimal(reader.GetOrdinal("AdditionalCharge"));
                                _UnitData.Add(_ud);
                            }
                        }
                    }
                    return new ResponseDataResults<List<UnitData>>
                    {
                        IsSuccess = true,
                        Message = "Data Reterival Successfully..",
                        Data = _UnitData
                    };
                }
            }
            catch (SqlException ex)
            {
                return new ResponseDataResults<List<UnitData>>
                {
                    IsSuccess = false,
                    Message = ex.Message,
                    Data = null
                };
            }
            catch (Exception ex)
            {
                return new ResponseDataResults<List<UnitData>>
                {
                    IsSuccess = false,
                    Message = "An error occurred: " + ex.Message,
                    Data = null
                };
            }

        }

        public async Task<ResponseDataResults<List<paymentPlan>>> paymentPlanList(decimal? blockID, decimal? unitID, decimal? companyID, decimal? locationID)
        {
            try
            {
                List<paymentPlan> plans = new List<paymentPlan>();

                using (SqlConnection connection = new SqlConnection(await _dbInterface.getREMSConnectionString()))
                {
                    await connection.OpenAsync();

                    using (SqlCommand command = new SqlCommand("GetPaymentPlanByUnitBlock", connection))
                    {
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.AddWithValue("@BlockID", blockID);
                        command.Parameters.AddWithValue("@UnitID", unitID);
                        command.Parameters.AddWithValue("@CompanyID", companyID);
                        command.Parameters.AddWithValue("@LocationID", locationID);

                        using (SqlDataReader reader = await command.ExecuteReaderAsync())
                        {
                            while (reader.Read())
                            {
                                paymentPlan _planData = new paymentPlan();

                                _planData.payplanID = reader.IsDBNull(reader.GetOrdinal("PayplanID")) ? 0 : reader.GetDecimal(reader.GetOrdinal("PayplanID"));
                                _planData.payplanName = reader.GetString(reader.GetOrdinal("PayplanName"));
                               

                                plans.Add(_planData);
                            }
                        }
                    }
                    return new ResponseDataResults<List<paymentPlan>>
                    {
                        IsSuccess = true,
                        Message = "Data Reterival Successfully..",
                        Data = plans
                    };
                }
            }
            catch (SqlException ex)
            {
                return new ResponseDataResults<List<paymentPlan>>
                {
                    IsSuccess = false,
                    Message = ex.Message,
                    Data = null
                };
            }
            catch (Exception ex)
            {
                return new ResponseDataResults<List<paymentPlan>>
                {
                    IsSuccess = false,
                    Message = "An error occurred: " + ex.Message,
                    Data = null
                };
            }

        }
        
        public async Task<ResponseDataResults<List<intrestPlan>>> intrestPlanList(decimal? companyID, decimal? locationID, decimal? groupID)
        {
            try
            {
                List<intrestPlan> intrests = new List<intrestPlan>();

                using (SqlConnection connection = new SqlConnection(await _dbInterface.getREMSConnectionString()))
                {
                    await connection.OpenAsync();

                    using (SqlCommand command = new SqlCommand("GetFillIntrestPlan", connection))
                    {
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.AddWithValue("@CompanyID", companyID);
                        command.Parameters.AddWithValue("@LocationID", locationID);
                        command.Parameters.AddWithValue("@GroupID", groupID);

                        using (SqlDataReader reader = await command.ExecuteReaderAsync())
                        {
                            while (reader.Read())
                            {
                                intrestPlan _intrestData = new intrestPlan();

                                _intrestData.intPlanID = reader.GetDecimal(reader.GetOrdinal("IntPlanID"));
                                _intrestData.intPlanName = reader.GetString(reader.GetOrdinal("IntPlanName"));

                                intrests.Add(_intrestData);
                            }
                        }
                    }
                    return new ResponseDataResults<List<intrestPlan>>
                    {
                        IsSuccess = true,
                        Message = "Data Reterival Successfully..",
                        Data = intrests
                    };
                }
            }
            catch (SqlException ex)
            {
                return new ResponseDataResults<List<intrestPlan>>
                {
                    IsSuccess = false,
                    Message = ex.Message,
                    Data = null
                };
            }
            catch (Exception ex)
            {
                return new ResponseDataResults<List<intrestPlan>>
                {
                    IsSuccess = false,
                    Message = "An error occurred: " + ex.Message,
                    Data = null
                };
            }

        }

        public async Task<ResponseDataResults<int>> addUbmUnit(UnitData _unitData)
        {
            int i = 0;
            try
            {

                using (SqlConnection connection = new SqlConnection(await _dbInterface.getREMSConnectionString()))
                {
                    await connection.OpenAsync();

                    using (SqlCommand command = new SqlCommand("ubm_AddUnitDetails", connection))
                    {
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.AddWithValue("@UnitID", _unitData.unitID);
                        command.Parameters.AddWithValue("@BasicAmount", _unitData.basicAmount);
                        command.Parameters.AddWithValue("@AdditionalAmount", _unitData.additionalCharge);
                        command.Parameters.AddWithValue("@DiscountAmount", _unitData.discountAmount);
                        command.Parameters.AddWithValue("@NetAmount", _unitData.netAmount);
                        command.Parameters.AddWithValue("@minSaleAmount", _unitData.minSaleAmount);
                        command.Parameters.AddWithValue("@maxSaleAmount", _unitData.maxSaleAmount);
                        command.Parameters.AddWithValue("@IntPlanID", _unitData.intrest.intPlanID);
                        command.Parameters.AddWithValue("@PayPlanID", _unitData.payment.payplanID);
                        command.Parameters.AddWithValue("@CreatedBy", _unitData.userID);
                        command.Parameters.AddWithValue("@groupID", _unitData.groupID);

                       i= await command.ExecuteNonQueryAsync();
                    }
                }
                return new ResponseDataResults<int>
                {
                    IsSuccess = true,
                    Message = "Unit Added Successfully",
                    Data = i
                };
            }
            catch (SqlException ex)
            {
                return new ResponseDataResults<int>
                {
                    IsSuccess = false,
                    Message = ex.Message,
                    Data = i
                };
            }
            catch (Exception ex)
            {
                return new ResponseDataResults<int>
                {
                    IsSuccess = false,
                    Message = "An error occurred: " + ex.Message,
                    Data = i
                };
            }
        }


    }
}
