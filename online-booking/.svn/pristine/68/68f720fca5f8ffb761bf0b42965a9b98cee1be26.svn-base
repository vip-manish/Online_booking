using PingaUnitBooking.Core.Domain;
using PingaUnitBooking.Infrastructure.Interfaces;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PingaUnitBooking.Infrastructure.Implementations
{
    public class MailConfigureService : IMailConfigureInterface
    {
        private readonly IDbInterface _dbInterface;
        public MailConfigureService(IDbInterface _dbInterface)
        {
            this._dbInterface = _dbInterface;
        }
        public async Task<ResponseDataResults<List<MailConfigure>>> GetMailConfigure(decimal GroupID,int ProjectID)
        {
            List<MailConfigure> mailConfigureList = new List<MailConfigure>();
            try
            { 
                using (SqlConnection connection = new SqlConnection(await _dbInterface.getREMSConnectionString()))
                {
                    await connection.OpenAsync();

                    using (SqlCommand command = new SqlCommand("ubm_GetMailConfigure", connection))
                    {
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.Add(new SqlParameter("@GroupID", GroupID));
                        command.Parameters.Add(new SqlParameter("@ProjectID", ProjectID));
                        using (SqlDataReader reader = await command.ExecuteReaderAsync())
                        {
                            while (reader.Read())
                            {
                                MailConfigure mailConfigure = new MailConfigure();
                                mailConfigure.MailConfigureID = Convert.ToInt32(reader["MailConfigureID"]);
                                mailConfigure.Type = Convert.ToString(reader["Type"]);
                                mailConfigure.SenderEmailID = Convert.ToString(reader["SenderEmailID"]);
                                mailConfigure.SenderName = Convert.ToString(reader["SenderName"]);
                                mailConfigure.SMTPServer = Convert.ToString(reader["SMTPServer"]);
                                mailConfigure.UserName = Convert.ToString(reader["UserName"]);
                                mailConfigure.Password = Convert.ToString(reader["Password"]);
                                mailConfigure.PerHourMail = Convert.ToString(reader["PerHourMail"]);
                                mailConfigure.URL = Convert.ToString(reader["URL"]);
                                mailConfigure.MailFrom = Convert.ToString(reader["MailFrom"]);
                                mailConfigure.Port = Convert.ToInt32(reader["Port"]);
                                mailConfigure.IsSSL = Convert.ToInt32(reader["isSSL"]);
                                mailConfigure.TokenWA = Convert.ToString(reader["TokenWA"]);
                                mailConfigure.PhoneWA = Convert.ToString(reader["PhoneWA"]);
                                mailConfigure.TypeWA = Convert.ToString(reader["TypeWA"]);
                                mailConfigure.BasedOn = Convert.ToString(reader["BasedOn"]);
                                mailConfigure.EmailProvider = Convert.ToString(reader["EmailProvider"]);

                                mailConfigureList.Add(mailConfigure);
                            }
                        }
                    }
                    return new ResponseDataResults<List<MailConfigure>>
                    {
                        IsSuccess = true,
                        Message = "Data Reterival Successfully..",
                        Data = mailConfigureList
                    };
                }
            }
            catch (SqlException ex)
            {
                return new ResponseDataResults<List<MailConfigure>>
                {
                    IsSuccess = false,
                    Message = ex.Message,
                    Data = mailConfigureList
                };
            }
            catch (Exception ex)
            {
                return new ResponseDataResults<List<MailConfigure>>
                {
                    IsSuccess = false,
                    Message = "An error occurred: " + ex.Message,
                    Data = mailConfigureList
                };
            }
        }

        public async Task<ResponseDataResults<List<Template>>> GetNotificationTemplate(decimal GroupID,string ProcessType)
        {
            List<Template> templateList = new List<Template>();
            try
            {
                using (SqlConnection connection = new SqlConnection(await _dbInterface.getREMSConnectionString()))
                {
                    await connection.OpenAsync();

                    using (SqlCommand command = new SqlCommand("ubm_GetNotificationTemplate", connection))
                    {
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.Add(new SqlParameter("@GroupID", GroupID));
                        command.Parameters.Add(new SqlParameter("@ProcessType", ProcessType));
                        using (SqlDataReader reader = await command.ExecuteReaderAsync())
                        {
                            while (reader.Read())
                            {
                                Template template = new Template();
                                template.TemplateID = Convert.ToInt32(reader["TemplateID"]);
                                template.TemplateMsg = Convert.ToString(reader["TemplateMsg"]);
                                template.VendorTemplateID = Convert.ToString(reader["VendorTemplateID"]);
                                template.TemplateType = Convert.ToString(reader["TemplateType"]);

                                templateList.Add(template);
                            }
                        }
                    }
                    return new ResponseDataResults<List<Template>>
                    {
                        IsSuccess = true,
                        Message = "Data Reterival Successfully..",
                        Data = templateList
                    };
                }
            }
            catch (SqlException ex)
            {
                return new ResponseDataResults<List<Template>>
                {
                    IsSuccess = false,
                    Message = ex.Message,
                    Data = templateList
                };
            }
            catch (Exception ex)
            {
                return new ResponseDataResults<List<Template>>
                {
                    IsSuccess = false,
                    Message = "An error occurred: " + ex.Message,
                    Data = templateList
                };
            }
        }
        public async Task<ResponseDataResults<Communication>> GetCustomerUnitDetail(int BookingID)
        {
             Communication communication = new Communication();
            try
            {
                using (SqlConnection connection = new SqlConnection(await _dbInterface.getREMSConnectionString()))
                {
                    await connection.OpenAsync();

                    using (SqlCommand command = new SqlCommand("ubm_GetCustomerUnitDetail", connection))
                    {
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.Add(new SqlParameter("@BookingID", BookingID)); 
                        using (SqlDataReader reader = await command.ExecuteReaderAsync())
                        {
                            while (reader.Read())
                            {
                                communication.BookingID = Convert.ToInt32(reader["UbmID"]);
                                communication.Email = Convert.ToString(reader["CustEmail"]);
                                communication.MobileNo = Convert.ToString(reader["CustMobNo"]);
                                communication.BookingUrl = Convert.ToString(reader["BookingUrl"]); 
                                communication.ApplicationType = Convert.ToString(reader["ApplicationType"]);
                                communication.UnitDetail = new UnitData();
                                communication.UnitDetail.unitNo = Convert.ToString(reader["UnitNo"]);
                                communication.UnitDetail.unitID = Convert.ToInt32(reader["UnitID"]);
                                communication.UnitDetail.area = Convert.ToDecimal(reader["Area"]);
                                communication.UnitDetail.rate = Convert.ToDecimal(reader["Rate"]);
                                communication.UnitDetail.additionalCharge = Convert.ToDecimal(reader["AdditionalAmount"]);
                                communication.UnitDetail.basicAmount = Convert.ToDecimal(reader["BasicAmount"]);
                                communication.UnitDetail.discountAmount = Convert.ToDecimal(reader["DiscountAmount"]);
                                communication.UnitDetail.unitBalconyArea = Convert.ToDecimal(reader["UnitBalconyArea"]);
                                communication.UnitDetail.unitBalconyAreaRate = Convert.ToDecimal(reader["UnitBalconyAreaRate"]);
                                communication.UnitDetail.unitCarpetArea = Convert.ToDecimal(reader["UnitCarpetArea"]);
                                communication.UnitDetail.unitCarpetAreaRate = Convert.ToDecimal(reader["UnitCarpetAreaRate"]);
                                communication.UnitDetail.projectName = Convert.ToString(reader["ProjectName"]);
                                communication.UnitDetail.projectAddress = Convert.ToString(reader["ProjectAddress"]);
                                communication.UnitDetail.towerName = Convert.ToString(reader["TowerName"]);
                                communication.UnitDetail.floorName = Convert.ToString(reader["FloorName"]);
                                communication.BookingAmount = Convert.ToDecimal(reader["BookingAmount"]);
                                communication.SalesPerson = Convert.ToString(reader["SalesPerson"]);
                            }
                        }
                    }
                    return new ResponseDataResults<Communication>
                    {
                        IsSuccess = true,
                        Message = "Data Reterival Successfully..",
                        Data = communication
                    };
                }
            }
            catch (SqlException ex)
            {
                return new ResponseDataResults<Communication>
                {
                    IsSuccess = false,
                    Message = ex.Message,
                    Data = communication
                };
            }
            catch (Exception ex)
            {
                return new ResponseDataResults<Communication>
                {
                    IsSuccess = false,
                    Message = "An error occurred: " + ex.Message,
                    Data = communication
                };
            }
        }
    }
}
